--- a/mods/CMakeLists.txt
+++ b/mods/CMakeLists.txt
@@ -45,7 +45,7 @@ else()
     target_link_libraries(sign reborn symbols feature input)
 
     add_library(creative SHARED src/creative/creative.cpp)
-    target_link_libraries(creative reborn symbols feature)
+    target_link_libraries(creative reborn symbols feature my-tile)
 
     add_library(touch SHARED src/touch/touch.c)
     target_link_libraries(touch reborn symbols feature)
@@ -75,11 +75,14 @@ target_link_libraries(options reborn symbols feature)
 add_library(home SHARED src/home/home.c)
 target_link_libraries(home reborn symbols)
 
+add_library(my-tile SHARED src/my-tile/my-tile.cpp)
+target_link_libraries(my-tile reborn symbols)
+
 add_library(test SHARED src/test/test.c)
 target_link_libraries(test reborn home)
 
 add_library(init SHARED src/init/init.c)
-target_link_libraries(init compat game-mode misc death options chat home version test)
+target_link_libraries(init compat game-mode misc death options chat home my-tile version test)
 if(MCPI_SERVER_MODE)
     target_link_libraries(init server)
 else()
@@ -87,7 +90,7 @@ else()
 endif()
 
 ## Install Mods
-install(TARGETS init compat readdir feature game-mode misc death options chat home version test DESTINATION "${MCPI_INSTALL_DIR}/mods")
+install(TARGETS init compat readdir feature game-mode misc death options chat home my-tile version test DESTINATION "${MCPI_INSTALL_DIR}/mods")
 if(MCPI_SERVER_MODE)
     install(TARGETS server DESTINATION "${MCPI_INSTALL_DIR}/mods")
 else()
--- a/mods/src/creative/creative.cpp
+++ b/mods/src/creative/creative.cpp
@@ -3,6 +3,7 @@
 
 #include "../init/init.h"
 #include "../feature/feature.h"
+#include "../my-tile/my-tile.h"
 
 // Add Item To Inventory
 static void inventory_add_item(unsigned char *inventory, unsigned char *item, bool is_tile) {
@@ -47,6 +48,7 @@ static int32_t Inventory_setupDefault_FillingContainer_addItem_call_injection(un
     inventory_add_item(filling_container, *Tile_bedrock, true);
     inventory_add_item(filling_container, *Tile_info_updateGame1, true);
     inventory_add_item(filling_container, *Tile_info_updateGame2, true);
+    inventory_add_item(filling_container, my_tile, true);
 
     return ret;
 }
--- a/mods/src/init/init.c
+++ b/mods/src/init/init.c
@@ -22,5 +22,6 @@ __attribute__((constructor)) static void init() {
     init_options();
     init_chat();
     init_home();
+    init_my_tile();
     init_version();
 }
--- a/mods/src/init/init.h
+++ b/mods/src/init/init.h
@@ -25,6 +25,7 @@ void init_death();
 void init_options();
 void init_chat();
 void init_home();
+void init_my_tile();
 void init_version();
 
 #ifdef __cplusplus
--- /dev/null
+++ b/mods/src/my-tile/my-tile.cpp
@@ -0,0 +1,70 @@
+#include <cstdlib>
+
+#include <libreborn/libreborn.h>
+#include <symbols/minecraft.h>
+
+#include "../init/init.h"
+#include "my-tile.h"
+
+// My Tile Use
+static int32_t MyTile_use(__attribute__((unused)) unsigned char *tile, __attribute__((unused)) unsigned char *level, int32_t x, int32_t y, int32_t z, __attribute__((unused)) unsigned char *player) {
+    INFO("%i %i %i", x, y, z);
+    return 1;
+}
+
+// My Tile VTable
+static unsigned char *get_my_tile_vtable() {
+    static unsigned char *vtable = NULL;
+    if (vtable == NULL) {
+        // Init
+        vtable = (unsigned char *) malloc(TILE_VTABLE_SIZE);
+        ALLOC_CHECK(vtable);
+        // Copy Old VTable
+        memcpy((void *) vtable, (void *) Tile_vtable, TILE_VTABLE_SIZE);
+
+        // Modify
+        *(Tile_use_t *) (vtable + Tile_use_vtable_offset) = MyTile_use;
+    }
+    return vtable;
+}
+__attribute__((destructor)) static void free_my_tile_vtable() {
+    free(get_my_tile_vtable());
+}
+
+// Add My Tile
+unsigned char *my_tile = NULL;
+static void Tile_initTiles_injection() {
+    // Allocate
+    my_tile = (unsigned char *) ::operator new(TILE_SIZE);
+    ALLOC_CHECK(my_tile);
+
+    // Construct
+    (*Tile)(my_tile, 19, 25, *Material_stone);
+
+    // Set VTable
+    *(unsigned char **) my_tile = get_my_tile_vtable();
+    unsigned char *my_tile_vtable = *(unsigned char **) my_tile;
+
+    // Get Functions
+    Tile_setDestroyTime_t Tile_setDestroyTime = *(Tile_setDestroyTime_t *) (my_tile_vtable + Tile_setDestroyTime_vtable_offset);
+    Tile_setExplodeable_t Tile_setExplodeable = *(Tile_setExplodeable_t *) (my_tile_vtable + Tile_setExplodeable_vtable_offset);
+    Tile_setSoundType_t Tile_setSoundType = *(Tile_setSoundType_t *) (my_tile_vtable + Tile_setSoundType_vtable_offset);
+    Tile_setDescriptionId_t Tile_setDescriptionId = *(Tile_setDescriptionId_t *) (my_tile_vtable + Tile_setDescriptionId_vtable_offset);
+
+    // Init
+    (*Tile_init)(my_tile);
+    (*Tile_setDestroyTime)(my_tile, 2.0f);
+    (*Tile_setExplodeable)(my_tile, 10.0f);
+    (*Tile_setSoundType)(my_tile, SOUND_STONE);
+    *(int32_t *) (my_tile + Tile_category_property_offset) = 1;
+    (*Tile_setDescriptionId)(my_tile, "my_tile");
+
+    // Call Original Method
+    (*Tile_initTiles)();
+}
+
+// Init
+void init_my_tile() {
+    // Add My Tile
+    overwrite_calls((void *) Tile_initTiles, (void *) Tile_initTiles_injection);
+}
--- /dev/null
+++ b/mods/src/my-tile/my-tile.h
@@ -0,0 +1,11 @@
+#pragma once
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+extern unsigned char *my_tile;
+
+#ifdef __cplusplus
+}
+#endif
